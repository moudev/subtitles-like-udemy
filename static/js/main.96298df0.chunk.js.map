{"version":3,"sources":["App.js","CustomFunctions.js","serviceWorker.js","index.js"],"names":["App","state","url","pip","playing","controls","light","volume","muted","played","duration","playbackRate","loop","indexCurrentSubtitle","textFromFile","onProgress","console","log","_this$state","_this","seeking","seg","formatToText","getCurrentSubtitleFromArray","setState","parseInt","onEnded","onDuration","onLessTime","second","_this$state2","player","seekTo","onMoreTime","_this$state3","renderLoadButton","label","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","type","onClick","load","ref","onLoadCustomURL","onClickFile","document","getElementById","click","onChangeFile","e","file","reader","FileReader","readAsText","onload","getTextFromInputFile","result","then","text","_this2","this","_this$state4","className","alt","src","react_player__WEBPACK_IMPORTED_MODULE_7___default","width","height","onReady","onStart","onBuffer","onError","Object","keys","length","map","key","id","input","urlInput","placeholder","value","target","rel","href","hidden","accept","onChange","files","Component","hot","module","pad","string","slice","seconds","date","Date","hh","getUTCHours","mm","getUTCMinutes","ss","getUTCSeconds","concat","convertArrayToObject","array","objectArray","forEach","res","convert","replace","split","Promise","resolve","arrayText","intSecond","__webpack_require__","d","__webpack_exports__","Boolean","window","location","hostname","match","ReactDOM","render","react_default","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96298df0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { hot } from 'react-hot-loader';\nimport ReactPlayer from 'react-player';\n\nimport './index.css';\n\nimport {\n  formatToText,\n  getCurrentSubtitleFromArray,\n  getTextFromInputFile,\n} from './CustomFunctions';\n\nclass App extends Component {\n  state = {\n    url: null,\n    pip: false,\n    playing: true,\n    controls: true,\n    light: false,\n    volume: 0.8,\n    muted: false,\n    played: 0,\n    duration: 0,\n    playbackRate: 1.0,\n    loop: false,\n    indexCurrentSubtitle: null,\n    textFromFile: {},\n  }\n\n  onProgress = (state) => {\n    console.log('onProgress', state);\n    const {\n      duration, played, textFromFile, seeking,\n    } = this.state;\n    const seg = formatToText(duration * played);\n    const currentSubtitle = getCurrentSubtitleFromArray(seg, textFromFile);\n    if (currentSubtitle) {\n      this.setState({\n        indexCurrentSubtitle: parseInt(seg, 10),\n      });\n    }\n    if (!seeking) {\n      this.setState(state);\n    }\n  }\n\n  onEnded = () => {\n    console.log('onEnded');\n    const { loop } = this.state;\n    this.setState({ playing: loop });\n  }\n\n  onDuration = (duration) => {\n    console.log('onDuration', duration);\n    this.setState({ duration });\n  }\n\n  onLessTime = (second) => {\n    console.log('Less ', second, ' seconds');\n    const { played, duration } = this.state;\n    const seg = (played * duration) - second;\n    this.player.seekTo(seg, 'seconds');\n  }\n\n  onMoreTime = (second) => {\n    console.log('More ', second, ' seconds');\n    const { played, duration } = this.state;\n    const seg = (played * duration) + second;\n    this.player.seekTo(seg, 'seconds');\n  }\n\n  renderLoadButton = (url, label) => (\n    <button type=\"button\" onClick={() => this.load(url)}>\n      {label}\n    </button>\n  )\n\n  ref = (player) => {\n    this.player = player;\n  }\n\n  onLoadCustomURL = (url) => {\n    this.setState({ url });\n  }\n\n  onClickFile = () => {\n    document.getElementById('file').click();\n  }\n\n  onChangeFile = (e) => {\n    const file = e[0];\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = () => {\n      getTextFromInputFile(reader.result)\n        .then(text => this.setState({ textFromFile: text }));\n    };\n  }\n\n  render() {\n    const {\n      url, playing, controls,\n      light, volume, muted,\n      loop, playbackRate, pip,\n      textFromFile,\n      indexCurrentSubtitle,\n    } = this.state;\n\n    return (\n      <div className=\"app\">\n        <section className=\"player\">\n          <div className=\"player-wrapper\">\n            {url === null\n              ? (\n                <img\n                  alt=\"video\"\n                  src=\"https://cdn3.iconfinder.com/data/icons/complete-set-icons/512/video512x512.png\"\n                />\n              )\n              : (\n                <ReactPlayer\n                  ref={this.ref}\n                  width=\"100%\"\n                  height=\"100%\"\n                  url={url}\n                  pip={pip}\n                  playing={playing}\n                  controls={controls}\n                  light={light}\n                  loop={loop}\n                  playbackRate={playbackRate}\n                  volume={volume}\n                  muted={muted}\n                  onReady={() => console.log('onReady')}\n                  onStart={() => console.log('onStart')}\n                  onBuffer={() => console.log('onBuffer')}\n                  onEnded={this.onEnded}\n                  onError={e => console.log('onError', e)}\n                  onProgress={this.onProgress}\n                  onDuration={this.onDuration}\n                />\n              )\n              }\n          </div>\n        </section>\n        <section className=\"subtitles\">\n          {Object.keys(textFromFile).length > 1\n            ? Object.keys(textFromFile).map(key => (\n              <span\n                key={key}\n                id={key}\n                className={parseInt(key, 10) === indexCurrentSubtitle ? 'selected' : ''}\n              >\n                {textFromFile[key]}\n                {' '}\n              </span>\n            ))\n            : 'Not subtitles loaded. Look \"Info.\"'}\n        </section>\n        <section className=\"custom-video\">\n          <section className=\"form-url\">\n            <span className=\"form-info\">\n            Info.\n              <span className=\"intructions\">\n              Introduzca la url del video. Luego seleccione los subtitulos\n              que desea sincronizar.\n              </span>\n            </span>\n            <input ref={(input) => { this.urlInput = input; }} type=\"text\" placeholder=\"Enter URL\" />\n            <button type=\"button\" onClick={() => this.onLoadCustomURL(this.urlInput.value)}>\n              Load\n            </button>\n          </section>\n          <section className=\"control\">\n            <button type=\"button\" onClick={() => this.onLessTime(10)}>10s Less</button>\n            <button type=\"button\" onClick={() => this.onLessTime(5)}>5s Less</button>\n            <button type=\"button\" onClick={() => this.onMoreTime(5)}>5s More</button>\n            <button type=\"button\" onClick={() => this.onMoreTime(10)}>10s More</button>\n          </section>\n        </section>\n        <footer className=\"footer\">\n          <button type=\"button\" onClick={this.onClickFile}>Load Subtitle</button>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/moudev/subtitles-like-udemy\"\n          >\n            <img\n              src=\"https://www.freepngimg.com/thumb/github/1-2-github-free-png-image.png\"\n              alt=\"github\"\n            />\n            GitHub Repository\n          </a>\n          <input\n            hidden\n            type=\"file\"\n            accept=\"text/plain\"\n            id=\"file\"\n            onChange={e => this.onChangeFile(e.target.files)}\n          />\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default hot(module)(App);\n","\nfunction pad(string) {\n  return ('0' + string).slice(-2);\n}\n\nexport function formatToText(seconds) {\n  const date = new Date(seconds * 1000);\n  const hh = date.getUTCHours();\n  const mm = date.getUTCMinutes();\n  const ss = pad(date.getUTCSeconds());\n  if (hh) {\n    return `${hh}${pad(mm)}${ss}`;\n  }\n  return `${mm}${ss}`;\n}\n\nfunction convertArrayToObject(array) {\n  const objectArray = {};\n  array.forEach((res) => {\n    const convert = res.replace(/\\t+|\\n+|\\r+/g, '|')\n      .replace(/^\\d*\\|\\|/gm, '')\n      .replace(/ --> .*\\d/g, '')\n      .replace(/,\\d{3}/g, '')\n      .replace(/\\|\\|/g, ' ')\n      .replace(/\\s/, '|')\n      .split('|');\n    objectArray[+(convert[0].replace(/:/g, ''))] = convert[1];\n  });\n  return objectArray;\n}\n\nexport function getTextFromInputFile(text) {\n  return new Promise((resolve) => {\n    const result = text.split(/\\s+[1-9]/g);\n    resolve(convertArrayToObject(result));\n  });\n}\n\nexport function getTextFromFile(fileName) {\n  return new Promise((resolve, reject) => {\n    fetch(fileName)\n      .then(res => res.text())\n      .then((text) => {\n        const result = text.split(/\\s+[1-9]/g);\n        resolve(convertArrayToObject(result));\n      })\n      .catch(err => reject(err));\n  });\n}\n\nexport function getCurrentSubtitleFromArray(second, arrayText) {\n  const intSecond = parseInt(second, 10);\n  const respuesta = typeof arrayText[`${intSecond}`] !== 'undefined'\n    ? arrayText[`${intSecond}`] : false;\n  return respuesta;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}